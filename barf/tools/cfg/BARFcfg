#! /usr/bin/env python

# Copyright (c) 2015, Fundacion Dr. Manuel Sadosky
# All rights reserved.

# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:

# 1. Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.

# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.

# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

from __future__ import print_function

import argparse
import os
import sys
import time

from barf.barf import BARF
from barf.core.symbols import load_symbol_tables


def load_symbols_from_binary(filename):
    with open(filename, "rb") as f:
        symbols = load_symbol_tables(f)

    symbols = {addr : (name, size, True) for addr, size, name in symbols}

    return symbols

def load_symbols_from_file(filename):
    symbols = {}

    with open(filename, "r") as f:
        for line in f.readlines():
            # Remove trailing '\n'.
            line = line[:-1]

            # Skip blank lines and comments.
            if (line == "" or line[0] == "#"):
                continue

            # Process line.
            parts = line.split(' ')

            try:
                addr, name, size, returns = parts[0], " ".join(parts[1:-2]), parts[-2], parts[-1]
            except:
                raise Exception("Error processing symbol file.")

            symbols[int(addr, 16)] = (name, int(size), returns == "True")

    return symbols

def recover_function_graph(barf, address, symbols, output_dir, show_reil):
    fn_name, fn_size, _ = symbols[address]
    fn_start = address
    fn_end = address + fn_size

    cfg = barf.recover_cfg(ea_start=fn_start, ea_end=fn_end - 1, symbols=symbols)

    cfg.save(output_dir + os.path.sep + fn_name, print_ir=show_reil, format='dot')

def recover_function_graph_all(barf, output_dir, show_reil):
    def print_status(address):
        name = "sub_{:x}".format(address)

        print("    Processing {} @ {:#x}...".format(name, address))

    start = barf.binary.entry_point

    cfgs = barf.recover_cfg_all(start, callback=print_status)

    for addr, cfg in cfgs:
        cfg.save(output_dir + os.path.sep + "sub_{:08x}".format(addr), print_ir=show_reil, format='dot')

def recover_function_text(barf, address, symbols, output_dir, brief, show_reil):
    fn_name, fn_size, _ = symbols[address]
    fn_start = address
    fn_end = fn_start + fn_size

    with open(output_dir + os.path.sep + fn_name + ".txt", "w") as f:
        print("Function : {} [{:#x} - {:#x}]".format(fn_name, fn_start, fn_end), file=f)

        cfg = barf.recover_cfg(ea_start=fn_start, ea_end=fn_end - 1, symbols=symbols)

        for bb in cfg.basic_blocks:
            # Check bb is within bounds of current function.
            if not (fn_start <= bb.address and bb.address <= fn_end):
                continue

            branches = ", ".join(sorted(["{:#x}".format(a) for a, _ in bb.branches]))

            print("[basic block] {:#x}:{:#x} -> {}".format(bb.start_address, bb.end_address + 1, branches), file=f)

            if not brief:
                for dinstr in bb:
                    asm_instr = dinstr.asm_instr

                    print("  {:#x}    {}".format(asm_instr.address, asm_instr), file=f)

                    if show_reil:
                        for reil_instr in dinstr.ir_instrs:
                            print("  {:#x}:{:02x}   {}".format(reil_instr.address >> 0x8, reil_instr.address & 0xFF, reil_instr), file=f)

def recover_function_text_all(barf, output_dir, brief, show_reil):
    def print_status(address):
        name = "sub_{:x}".format(address)

        print("    Processing {} @ {:#x}...".format(name, address))

    start = barf.binary.entry_point

    cfgs = barf.recover_cfg_all(start, callback=print_status)

    for addr, cfg in cfgs:
        fn_name = "sub_{:x}".format(addr)
        fn_start = addr
        fn_end = 0

        with open(output_dir + os.path.sep + fn_name + ".txt", "w") as f:
            print("Function : {} [{:#x} - {:#x}]".format(fn_name, fn_start, fn_end), file=f)

            for bb in cfg.basic_blocks:
                # # Check bb is within bounds of current function.
                # if not (fn_start <= bb.address and bb.address <= fn_end):
                #     continue

                branches = ", ".join(sorted(["{:#x}".format(a) for a, _ in bb.branches]))

                print("[basic block] {:#x}:{:#x} -> {}".format(bb.start_address, bb.end_address + 1, branches), file=f)

                if not brief:
                    for dinstr in bb:
                        asm_instr = dinstr.asm_instr

                        print("  {:#x}    {}".format(asm_instr.address, asm_instr), file=f)

                        if show_reil:
                            for reil_instr in dinstr.ir_instrs:
                                print("  {:#x}:{:02x}   {}".format(reil_instr.address >> 0x8, reil_instr.address & 0xFF, reil_instr), file=f)

def create_output_dir(name):
    if not os.path.exists(name):
        os.makedirs(name)

    return name

def init_parser():

    description = "Tool for recovering CFG of a binary."

    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description=description)

    parser.add_argument(
        "filename",
        type=str,
        help="Binary file name.")

    parser.add_argument(
        "-s", "--symbol-file",
        type=str,
        help="Load symbols from file.")

    parser.add_argument(
        "-a", "--recover-all",
        action="store_true",
        help="Recover all functions.")

    parser.add_argument(
        "-o", "--recover-one",
        type=str,
        help="Recover specified function.")

    parser.add_argument(
        "-f", "--format",
        type=str,
        default="graph",
        choices=["graph", "text"],
        help="Output format.")

    parser.add_argument(
        "-t", "--time",
        action="store_true",
        help="Print process time.")

    parser.add_argument(
        "-d", "--output-dir",
        type=str,
        help="Ouput directory.")

    parser.add_argument(
        "-b", "--brief",
        default=False,
        action="store_true",
        help="Brief output.")

    parser.add_argument(
        "-r", "--show-reil",
        default=False,
        action="store_true",
        help="Show REIL translation.")

    return parser

def main():

    parser = init_parser()

    args = parser.parse_args()

    process_start = time.time()

    filename = os.path.abspath(args.filename)

    if not os.path.isfile(filename):
        print("[-] Error opening file : {}".format(filename))

        sys.exit(1)

    # Create an instance of BARF.
    try:
        barf = BARF(filename)
    except Exception:
        print("[-] Error opening file : {}".format(filename))

        sys.exit(1)

    output_dir = args.output_dir if args.output_dir else "."

    # Load symbols.
    print("[+] Parsing symbol table...")

    # if args.symbol_file:
    #     symbols_by_addr = load_symbols_from_file(args.symbol_file)
    # else:
    #     symbols_by_addr = load_symbols_from_binary(filename)

    # symbols_by_name = {
    #     name : (addr, size, returns)
    #         for addr, (name, size, returns) in symbols_by_addr.items()
    # }

    symbols = {}

    # Recover CFG.
    print("[+] Recovering program CFG...")

    output_dir = create_output_dir(output_dir + os.path.sep + filename.split('/')[-1] + "_cfg")

    if args.recover_all:
        if len(symbols) > 0:
            for addr in sorted(symbols_by_addr.keys()):
                name, size, _ = symbols_by_addr[addr]

                print("    Processing {} @ {:#x} ({})...".format(name, addr, size))

                if args.format == "graph":
                    recover_function_graph(barf, addr, symbols_by_addr, output_dir, args.show_reil)

                if args.format == "text":
                    recover_function_text(barf, addr, symbols_by_addr, output_dir, args.brief, args.show_reil)
        else:
            if args.format == "graph":
                recover_function_graph_all(barf, output_dir, args.show_reil)

            if args.format == "text":
                recover_function_text_all(barf, output_dir, args.brief, args.show_reil)

    if args.recover_one:
        name = args.recover_one
        addr, size, _ = symbols_by_name[name]

        print("    Processing {} @ {:#x} ({})...".format(name, addr, size))

        if args.format == "graph":
            recover_function_graph(barf, addr, symbols_by_addr, output_dir, args.show_reil)

        if args.format == "text":
            recover_function_text(barf, addr, symbols_by_addr, output_dir, args.brief, args.show_reil)

    process_end = time.time()

    if args.time:
        process_time = process_end - process_start

        print("[+] Process time: {:.3f}s".format(process_time))

if __name__ == "__main__":

    main()
